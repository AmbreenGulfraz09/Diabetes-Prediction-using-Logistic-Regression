# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vhib_Iu8cGkVUa97RKGX_yRMy7-XLJ3n

**Logistic Regression**
*Let's build the diabetes prediction model*
"""

# Model building in Scikit-learn
import pandas as pd
col_names = ['pregnant','glucose','bp','skin','insulin','bmi','pedegree','age','outcome']

# load dataset, ensuring strings are converted to numeric
dataset = pd.read_csv('diabetes.csv',header=0,names = col_names)

# Handle non-numeric values if any (example: replace 'pregnant' column non-numeric values with NaN and then fill with 0)
dataset['pregnant'] = pd.to_numeric(dataset['pregnant'], errors='coerce').fillna(0)

# Now convert 'pregnant' column to float
dataset['pregnant'] = dataset['pregnant'].astype(float)
# dataset.head()

# split dataset in dependent and independent variable
feature_cols = ['pregnant','glucose','bp','skin','insulin','bmi','pedegree','age']
X = dataset[feature_cols]  # independent
Y = dataset.outcome  # dependent

# split X and y into training and testing sets
from sklearn.model_selection import train_test_split
X_train , X_test , Y_train , Y_test = train_test_split(X,Y,test_size = 0.25, random_state = 16)
# test size 0.25 means 25% data used for testing , remaining 75% for training
# Dataset is broken into two parts in a ratio of 75:25

# By setting a random state,
# you guarantee that the same split will be generated every time you run the code with the same data

# Model Development and Prediction
from sklearn.linear_model import LogisticRegression
LR = LogisticRegression(random_state = 16,max_iter= 1000)
LR.fit(X_train , Y_train)

Y_predict = LR.predict(X_test)
print(Y_predict)

# Model Evaluation using Confusion Matrix
from sklearn import metrics
cnf_metrix = metrics.confusion_matrix(Y_test,Y_predict)
cnf_metrix

# visualize the confusion matrix using Heatmap.
# import required modules
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

class_names=[0,1] # name  of classes
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
# create heatmap
sns.heatmap(pd.DataFrame(cnf_metrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
# plt.text(0.5,257.44,'Predicted label')

# Confusion Matrix Evaluation Metrics
from sklearn.metrics import classification_report
target_names = ['without diabetes', 'with diabetes']
print(classification_report(Y_test, Y_predict, target_names=target_names))

# ROC Curve
Y_predict_proba = LR.predict_proba(X_test)[::,1]
fpr, tpr, _ = metrics.roc_curve(Y_test,  Y_predict_proba)
auc = metrics.roc_auc_score(Y_test, Y_predict_proba)
plt.plot(fpr,tpr,label="data 1, auc="+str(auc))
plt.legend(loc=4)
plt.show()